### Chat Application API Tests
### Base URL
@baseUrl = http://localhost:3000/api
@token = {{auth_response.response.body.data.tokens.access}}
@userId = {{auth_response.response.body.data.user._id}}
@roomId = {{createRoom_response.response.body.data.chatRoom._id}}
@messageId = {{sendMessage_response.response.body.data.message._id}}

#############################
### HEALTH CHECK
#############################

### Health Check
GET {{baseUrl}}/health

#############################
### AUTHENTICATION ENDPOINTS
#############################

### Register User 1
# @name auth_response
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "email": "john@example.com",
  "username": "johndoe",
  "password": "password123",
  "profilePic": "https://example.com/avatar1.jpg"
}

### Register User 2 (for testing chat rooms)
# @name user2_response
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "email": "jane@example.com",
  "username": "janedoe",
  "password": "password123",
  "profilePic": "https://example.com/avatar2.jpg"
}

### Register User 3 (for group chats)
# @name user3_response
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "email": "bob@example.com",
  "username": "bobsmith",
  "password": "password123"
}

### Login User 1
# @name login_response
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "john@example.com",
  "password": "password123"
}

### Login User 2
# @name login2_response
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "jane@example.com",
  "password": "password123"
}

### Get Current User Profile
GET {{baseUrl}}/auth/me
Authorization: Bearer {{token}}

### Update User Profile
PUT {{baseUrl}}/auth/me
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "username": "johndoe_updated",
  "profilePic": "https://example.com/new-avatar.jpg"
}

### Initiate Password Reset
POST {{baseUrl}}/auth/reset-password
Content-Type: application/json

{
  "email": "john@example.com"
}

### Reset Password (use token from previous response)
POST {{baseUrl}}/auth/reset-password/RESET_TOKEN_HERE
Content-Type: application/json

{
  "password": "newpassword123"
}

### Logout
POST {{baseUrl}}/auth/logout
Authorization: Bearer {{token}}

### Refresh Token (Not fully implemented)
POST {{baseUrl}}/auth/refresh-token
Content-Type: application/json

{
  "refreshToken": "REFRESH_TOKEN_HERE"
}

#############################
### USER ENDPOINTS
#############################

### Get User Profile
GET {{baseUrl}}/users/me
Authorization: Bearer {{token}}

### Update User Profile
PUT {{baseUrl}}/users/me
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "username": "johndoe_v2",
  "profilePic": "https://example.com/avatar-v2.jpg"
}

### Search Users
GET {{baseUrl}}/users/search?query=jane&type=username
Authorization: Bearer {{token}}

### Search Users by Email
GET {{baseUrl}}/users/search?query=bob@example.com&type=email
Authorization: Bearer {{token}}

### Search Users (Both username and email)
GET {{baseUrl}}/users/search?query=doe&type=both
Authorization: Bearer {{token}}

### Get Online Users
GET {{baseUrl}}/users/online
Authorization: Bearer {{token}}

### Get User by ID (replace with actual user ID)
GET {{baseUrl}}/users/{{userId}}
Authorization: Bearer {{token}}

### Update Online Status
PUT {{baseUrl}}/users/status
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "isOnline": true
}

#############################
### CHAT ROOM ENDPOINTS
#############################

### Create Private Chat Room
# @name createRoom_response
POST {{baseUrl}}/chatrooms
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "type": "private",
  "participants": ["{{user2_response.response.body.data.user._id}}"]
}

### Create Group Chat Room
# @name createGroupRoom_response
POST {{baseUrl}}/chatrooms
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "Development Team",
  "type": "group",
  "participants": [
    "{{user2_response.response.body.data.user._id}}",
    "{{user3_response.response.body.data.user._id}}"
  ],
  "description": "Discussion about development tasks"
}

### Get User's Chat Rooms
GET {{baseUrl}}/chatrooms
Authorization: Bearer {{token}}

### Get Specific Chat Room
GET {{baseUrl}}/chatrooms/{{roomId}}
Authorization: Bearer {{token}}

### Update Chat Room
PUT {{baseUrl}}/chatrooms/{{roomId}}
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "Updated Development Team",
  "description": "Updated description for the team"
}

### Join Chat Room (for group chats)
POST {{baseUrl}}/chatrooms/{{roomId}}/join
Authorization: Bearer {{token}}

### Leave Chat Room (for group chats)
POST {{baseUrl}}/chatrooms/{{roomId}}/leave
Authorization: Bearer {{token}}

### Delete Chat Room
DELETE {{baseUrl}}/chatrooms/{{roomId}}
Authorization: Bearer {{token}}

#############################
### MESSAGE ENDPOINTS
#############################

### Send Text Message
# @name sendMessage_response
POST {{baseUrl}}/chatrooms/{{roomId}}/messages
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "content": "Hello! This is my first message in this chat room.",
  "type": "text"
}

### Send Message with Reply
POST {{baseUrl}}/chatrooms/{{roomId}}/messages
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "content": "This is a reply to the previous message!",
  "type": "text",
  "replyTo": "{{messageId}}"
}

### Send Image Message (simulated)
POST {{baseUrl}}/chatrooms/{{roomId}}/messages
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "content": "https://example.com/image.jpg",
  "type": "image",
  "metadata": {
    "fileName": "screenshot.jpg",
    "fileSize": 1024000,
    "mimeType": "image/jpeg",
    "imageWidth": 1920,
    "imageHeight": 1080
  }
}

### Send File Message (simulated)
POST {{baseUrl}}/chatrooms/{{roomId}}/messages
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "content": "https://example.com/document.pdf",
  "type": "file",
  "metadata": {
    "fileName": "project-specs.pdf",
    "fileSize": 2048000,
    "mimeType": "application/pdf"
  }
}

### Get Messages (Paginated)
GET {{baseUrl}}/chatrooms/{{roomId}}/messages
Authorization: Bearer {{token}}

### Get Messages with Pagination
GET {{baseUrl}}/chatrooms/{{roomId}}/messages?page=1&limit=10
Authorization: Bearer {{token}}

### Get Messages Before Specific Message
GET {{baseUrl}}/chatrooms/{{roomId}}/messages?before={{messageId}}&limit=5
Authorization: Bearer {{token}}

### Edit Message
PUT {{baseUrl}}/chatrooms/messages/{{messageId}}
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "content": "This message has been edited!"
}

### Delete Message
DELETE {{baseUrl}}/chatrooms/messages/{{messageId}}
Authorization: Bearer {{token}}

### Mark Message as Read
POST {{baseUrl}}/chatrooms/messages/{{messageId}}/read
Authorization: Bearer {{token}}

### Mark All Messages in Room as Read
POST {{baseUrl}}/chatrooms/{{roomId}}/read
Authorization: Bearer {{token}}

### Get Unread Message Count
GET {{baseUrl}}/chatrooms/{{roomId}}/unread-count
Authorization: Bearer {{token}}

#############################
### ERROR TESTING
#############################

### Test 401 Unauthorized
GET {{baseUrl}}/users/me

### Test 400 Bad Request - Invalid Email
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "email": "invalid-email",
  "username": "testuser",
  "password": "password123"
}

### Test 400 Bad Request - Short Password
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "email": "test@example.com",
  "username": "testuser",
  "password": "123"
}

### Test 400 Bad Request - Invalid Username
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "email": "test@example.com",
  "username": "invalid username with spaces",
  "password": "password123"
}

### Test 404 Not Found - Non-existent Room
GET {{baseUrl}}/chatrooms/507f1f77bcf86cd799439011
Authorization: Bearer {{token}}

### Test 400 Bad Request - Invalid Room ID Format
GET {{baseUrl}}/chatrooms/invalid-id
Authorization: Bearer {{token}}

### Test 400 Bad Request - Empty Message
POST {{baseUrl}}/chatrooms/{{roomId}}/messages
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "content": ""
}

### Test 400 Bad Request - Message Too Long
POST {{baseUrl}}/chatrooms/{{roomId}}/messages
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "content": "{{'a'.repeat(2001)}}"
}

#############################
### RATE LIMITING TESTS
#############################

### Test Rate Limiting on Auth Endpoints (run multiple times quickly)
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "nonexistent@example.com",
  "password": "wrongpassword"
}

#############################
### TESTING SCENARIOS
#############################

### Scenario 1: Complete User Journey
### 1. Register → 2. Login → 3. Update Profile → 4. Search Users → 5. Create Chat → 6. Send Messages

### Scenario 2: Group Chat Flow
### 1. Create Group → 2. Add Members → 3. Send Messages → 4. Update Room → 5. Leave Room

### Scenario 3: Message Management
### 1. Send Message → 2. Edit Message → 3. Reply to Message → 4. Mark as Read → 5. Delete Message

#############################
### NOTES
#############################

###
### To use this file:
### 1. Install REST Client extension in VS Code
### 2. Make sure your server is running on http://localhost:3000
### 3. Start with registering users, then use the responses for subsequent requests
### 4. The variables ({{token}}, {{userId}}, etc.) will be automatically populated from responses
### 5. Run requests in order for the best testing experience
###

###
### Environment Setup:
### 1. MongoDB should be running
### 2. Server should be started with: yarn dev
### 3. Environment variables should be properly configured
###